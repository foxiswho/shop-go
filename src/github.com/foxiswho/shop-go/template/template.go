// Code generated by go-bindata.
// sources:
// template/40x.tmpl
// template/50x.tmpl
// template/design/goxorm/config
// template/design/goxorm/struct.go.tpl
// template/design/make/controllers.go.tpl
// template/design/make/service.go.tpl
// template/include/base.html
// template/layout/www/about.html
// template/layout/www/home.html
// template/layout/www/index.html
// template/layout/www/login.html
// template/layout/www/register.html
// template/layout/www/user.html
// template/layout.tmpl
// template/pongo2/base.html
// template/pongo2/example/test/cache.html
// template/pongo2/example/test/cookie.html
// template/pongo2/example/test/jsonp.html
// template/pongo2/example/test/jwt_login.html
// template/pongo2/example/test/jwt_tester.html
// template/pongo2/example/test/login.html
// template/pongo2/example/test/orm.html
// template/pongo2/example/test/register.html
// template/pongo2/example/test/session.html
// template/pongo2/example/test/upload.html
// template/pongo2/example/test/user.html
// template/pongo2/example/test/ws.html
// template/pongo2/web/index/about.html
// template/pongo2/web/index/home.html
// template/pongo2/web/index.html
// DO NOT EDIT!

package template

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// template40xTmpl reads file data from disk. It returns an error on failure.
func template40xTmpl() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/40x.tmpl"
	name := "template/40x.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// template50xTmpl reads file data from disk. It returns an error on failure.
func template50xTmpl() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/50x.tmpl"
	name := "template/50x.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templateDesignGoxormConfig reads file data from disk. It returns an error on failure.
func templateDesignGoxormConfig() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/design/goxorm/config"
	name := "template/design/goxorm/config"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templateDesignGoxormStructGoTpl reads file data from disk. It returns an error on failure.
func templateDesignGoxormStructGoTpl() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/design/goxorm/struct.go.tpl"
	name := "template/design/goxorm/struct.go.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templateDesignMakeControllersGoTpl reads file data from disk. It returns an error on failure.
func templateDesignMakeControllersGoTpl() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/design/make/controllers.go.tpl"
	name := "template/design/make/controllers.go.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templateDesignMakeServiceGoTpl reads file data from disk. It returns an error on failure.
func templateDesignMakeServiceGoTpl() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/design/make/service.go.tpl"
	name := "template/design/make/service.go.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templateIncludeBaseHtml reads file data from disk. It returns an error on failure.
func templateIncludeBaseHtml() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/include/base.html"
	name := "template/include/base.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templateLayoutWwwAboutHtml reads file data from disk. It returns an error on failure.
func templateLayoutWwwAboutHtml() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/layout/www/about.html"
	name := "template/layout/www/about.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templateLayoutWwwHomeHtml reads file data from disk. It returns an error on failure.
func templateLayoutWwwHomeHtml() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/layout/www/home.html"
	name := "template/layout/www/home.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templateLayoutWwwIndexHtml reads file data from disk. It returns an error on failure.
func templateLayoutWwwIndexHtml() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/layout/www/index.html"
	name := "template/layout/www/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templateLayoutWwwLoginHtml reads file data from disk. It returns an error on failure.
func templateLayoutWwwLoginHtml() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/layout/www/login.html"
	name := "template/layout/www/login.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templateLayoutWwwRegisterHtml reads file data from disk. It returns an error on failure.
func templateLayoutWwwRegisterHtml() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/layout/www/register.html"
	name := "template/layout/www/register.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templateLayoutWwwUserHtml reads file data from disk. It returns an error on failure.
func templateLayoutWwwUserHtml() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/layout/www/user.html"
	name := "template/layout/www/user.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templateLayoutTmpl reads file data from disk. It returns an error on failure.
func templateLayoutTmpl() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/layout.tmpl"
	name := "template/layout.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatePongo2BaseHtml reads file data from disk. It returns an error on failure.
func templatePongo2BaseHtml() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/pongo2/base.html"
	name := "template/pongo2/base.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatePongo2ExampleTestCacheHtml reads file data from disk. It returns an error on failure.
func templatePongo2ExampleTestCacheHtml() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/pongo2/example/test/cache.html"
	name := "template/pongo2/example/test/cache.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatePongo2ExampleTestCookieHtml reads file data from disk. It returns an error on failure.
func templatePongo2ExampleTestCookieHtml() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/pongo2/example/test/cookie.html"
	name := "template/pongo2/example/test/cookie.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatePongo2ExampleTestJsonpHtml reads file data from disk. It returns an error on failure.
func templatePongo2ExampleTestJsonpHtml() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/pongo2/example/test/jsonp.html"
	name := "template/pongo2/example/test/jsonp.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatePongo2ExampleTestJwt_loginHtml reads file data from disk. It returns an error on failure.
func templatePongo2ExampleTestJwt_loginHtml() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/pongo2/example/test/jwt_login.html"
	name := "template/pongo2/example/test/jwt_login.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatePongo2ExampleTestJwt_testerHtml reads file data from disk. It returns an error on failure.
func templatePongo2ExampleTestJwt_testerHtml() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/pongo2/example/test/jwt_tester.html"
	name := "template/pongo2/example/test/jwt_tester.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatePongo2ExampleTestLoginHtml reads file data from disk. It returns an error on failure.
func templatePongo2ExampleTestLoginHtml() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/pongo2/example/test/login.html"
	name := "template/pongo2/example/test/login.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatePongo2ExampleTestOrmHtml reads file data from disk. It returns an error on failure.
func templatePongo2ExampleTestOrmHtml() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/pongo2/example/test/orm.html"
	name := "template/pongo2/example/test/orm.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatePongo2ExampleTestRegisterHtml reads file data from disk. It returns an error on failure.
func templatePongo2ExampleTestRegisterHtml() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/pongo2/example/test/register.html"
	name := "template/pongo2/example/test/register.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatePongo2ExampleTestSessionHtml reads file data from disk. It returns an error on failure.
func templatePongo2ExampleTestSessionHtml() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/pongo2/example/test/session.html"
	name := "template/pongo2/example/test/session.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatePongo2ExampleTestUploadHtml reads file data from disk. It returns an error on failure.
func templatePongo2ExampleTestUploadHtml() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/pongo2/example/test/upload.html"
	name := "template/pongo2/example/test/upload.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatePongo2ExampleTestUserHtml reads file data from disk. It returns an error on failure.
func templatePongo2ExampleTestUserHtml() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/pongo2/example/test/user.html"
	name := "template/pongo2/example/test/user.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatePongo2ExampleTestWsHtml reads file data from disk. It returns an error on failure.
func templatePongo2ExampleTestWsHtml() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/pongo2/example/test/ws.html"
	name := "template/pongo2/example/test/ws.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatePongo2WebIndexAboutHtml reads file data from disk. It returns an error on failure.
func templatePongo2WebIndexAboutHtml() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/pongo2/web/index/about.html"
	name := "template/pongo2/web/index/about.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatePongo2WebIndexHomeHtml reads file data from disk. It returns an error on failure.
func templatePongo2WebIndexHomeHtml() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/pongo2/web/index/home.html"
	name := "template/pongo2/web/index/home.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatePongo2WebIndexHtml reads file data from disk. It returns an error on failure.
func templatePongo2WebIndexHtml() (*asset, error) {
	path := "/Users/fox/go/mypath/src/github.com/foxiswho/shop-go/template/pongo2/web/index.html"
	name := "template/pongo2/web/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/40x.tmpl": template40xTmpl,
	"template/50x.tmpl": template50xTmpl,
	"template/design/goxorm/config": templateDesignGoxormConfig,
	"template/design/goxorm/struct.go.tpl": templateDesignGoxormStructGoTpl,
	"template/design/make/controllers.go.tpl": templateDesignMakeControllersGoTpl,
	"template/design/make/service.go.tpl": templateDesignMakeServiceGoTpl,
	"template/include/base.html": templateIncludeBaseHtml,
	"template/layout/www/about.html": templateLayoutWwwAboutHtml,
	"template/layout/www/home.html": templateLayoutWwwHomeHtml,
	"template/layout/www/index.html": templateLayoutWwwIndexHtml,
	"template/layout/www/login.html": templateLayoutWwwLoginHtml,
	"template/layout/www/register.html": templateLayoutWwwRegisterHtml,
	"template/layout/www/user.html": templateLayoutWwwUserHtml,
	"template/layout.tmpl": templateLayoutTmpl,
	"template/pongo2/base.html": templatePongo2BaseHtml,
	"template/pongo2/example/test/cache.html": templatePongo2ExampleTestCacheHtml,
	"template/pongo2/example/test/cookie.html": templatePongo2ExampleTestCookieHtml,
	"template/pongo2/example/test/jsonp.html": templatePongo2ExampleTestJsonpHtml,
	"template/pongo2/example/test/jwt_login.html": templatePongo2ExampleTestJwt_loginHtml,
	"template/pongo2/example/test/jwt_tester.html": templatePongo2ExampleTestJwt_testerHtml,
	"template/pongo2/example/test/login.html": templatePongo2ExampleTestLoginHtml,
	"template/pongo2/example/test/orm.html": templatePongo2ExampleTestOrmHtml,
	"template/pongo2/example/test/register.html": templatePongo2ExampleTestRegisterHtml,
	"template/pongo2/example/test/session.html": templatePongo2ExampleTestSessionHtml,
	"template/pongo2/example/test/upload.html": templatePongo2ExampleTestUploadHtml,
	"template/pongo2/example/test/user.html": templatePongo2ExampleTestUserHtml,
	"template/pongo2/example/test/ws.html": templatePongo2ExampleTestWsHtml,
	"template/pongo2/web/index/about.html": templatePongo2WebIndexAboutHtml,
	"template/pongo2/web/index/home.html": templatePongo2WebIndexHomeHtml,
	"template/pongo2/web/index.html": templatePongo2WebIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"40x.tmpl": &bintree{template40xTmpl, map[string]*bintree{}},
		"50x.tmpl": &bintree{template50xTmpl, map[string]*bintree{}},
		"design": &bintree{nil, map[string]*bintree{
			"goxorm": &bintree{nil, map[string]*bintree{
				"config": &bintree{templateDesignGoxormConfig, map[string]*bintree{}},
				"struct.go.tpl": &bintree{templateDesignGoxormStructGoTpl, map[string]*bintree{}},
			}},
			"make": &bintree{nil, map[string]*bintree{
				"controllers.go.tpl": &bintree{templateDesignMakeControllersGoTpl, map[string]*bintree{}},
				"service.go.tpl": &bintree{templateDesignMakeServiceGoTpl, map[string]*bintree{}},
			}},
		}},
		"include": &bintree{nil, map[string]*bintree{
			"base.html": &bintree{templateIncludeBaseHtml, map[string]*bintree{}},
		}},
		"layout": &bintree{nil, map[string]*bintree{
			"www": &bintree{nil, map[string]*bintree{
				"about.html": &bintree{templateLayoutWwwAboutHtml, map[string]*bintree{}},
				"home.html": &bintree{templateLayoutWwwHomeHtml, map[string]*bintree{}},
				"index.html": &bintree{templateLayoutWwwIndexHtml, map[string]*bintree{}},
				"login.html": &bintree{templateLayoutWwwLoginHtml, map[string]*bintree{}},
				"register.html": &bintree{templateLayoutWwwRegisterHtml, map[string]*bintree{}},
				"user.html": &bintree{templateLayoutWwwUserHtml, map[string]*bintree{}},
			}},
		}},
		"layout.tmpl": &bintree{templateLayoutTmpl, map[string]*bintree{}},
		"pongo2": &bintree{nil, map[string]*bintree{
			"base.html": &bintree{templatePongo2BaseHtml, map[string]*bintree{}},
			"example": &bintree{nil, map[string]*bintree{
				"test": &bintree{nil, map[string]*bintree{
					"cache.html": &bintree{templatePongo2ExampleTestCacheHtml, map[string]*bintree{}},
					"cookie.html": &bintree{templatePongo2ExampleTestCookieHtml, map[string]*bintree{}},
					"jsonp.html": &bintree{templatePongo2ExampleTestJsonpHtml, map[string]*bintree{}},
					"jwt_login.html": &bintree{templatePongo2ExampleTestJwt_loginHtml, map[string]*bintree{}},
					"jwt_tester.html": &bintree{templatePongo2ExampleTestJwt_testerHtml, map[string]*bintree{}},
					"login.html": &bintree{templatePongo2ExampleTestLoginHtml, map[string]*bintree{}},
					"orm.html": &bintree{templatePongo2ExampleTestOrmHtml, map[string]*bintree{}},
					"register.html": &bintree{templatePongo2ExampleTestRegisterHtml, map[string]*bintree{}},
					"session.html": &bintree{templatePongo2ExampleTestSessionHtml, map[string]*bintree{}},
					"upload.html": &bintree{templatePongo2ExampleTestUploadHtml, map[string]*bintree{}},
					"user.html": &bintree{templatePongo2ExampleTestUserHtml, map[string]*bintree{}},
					"ws.html": &bintree{templatePongo2ExampleTestWsHtml, map[string]*bintree{}},
				}},
			}},
			"web": &bintree{nil, map[string]*bintree{
				"index": &bintree{nil, map[string]*bintree{
					"about.html": &bintree{templatePongo2WebIndexAboutHtml, map[string]*bintree{}},
					"home.html": &bintree{templatePongo2WebIndexHomeHtml, map[string]*bintree{}},
				}},
				"index.html": &bintree{templatePongo2WebIndexHtml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

